import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r,o,c as d,d as c,a as e,b as i,e as t,f as s}from"./app-1a68934e.js";const l="/assets/2023-07-19-01-e3ae39c3.jpg",h="/assets/2023-07-19-02-049fb473.jpg",p="/assets/meme-01-27fe64f1.jpg",g="/assets/2023-07-19-03-12a94051.jpg",b="/assets/2023-07-19-04-c9332f7e.jpg",u="/assets/2023-07-19-05-271f5016.jpg",f="/assets/2023-07-19-06-0239469c.jpg",m="/assets/2023-07-19-07-d5c880cd.jpg",_="/assets/meme-02-84eaea1e.jpg",x="/assets/2023-07-19-08-c65e7770.jpg",y="/assets/2023-07-19-09-abb5dea5.jpg",v="/assets/2023-07-19-10-c58c34ff.jpg",z="/assets/2023-07-19-11-76e3307e.jpg",C="/assets/meme-04-dea02422.jpg",G="/assets/ci-cd-devops-cycle-4018283f.png",j="/assets/meme-03-9cbef8b4.jpg",k="/assets/meme-06-0787db41.jpg",V="/assets/2023-07-20-02-b7bee702.png",w="/assets/2023-07-20-03-ba94134a.png",H="/assets/2023-07-20-04-c896a873.png",I="/assets/2023-07-20-05-a15aa07c.png",D="/assets/2023-07-20-01-849d89b6.png",A={},P=e("h1",{id:"使用-github-actions-發佈-vite-專案到另一個存放庫",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-github-actions-發佈-vite-專案到另一個存放庫","aria-hidden":"true"},"#"),i(" 使用 GitHub Actions 發佈 Vite 專案到另一個存放庫")],-1),E=e("h2",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),i(" 前言")],-1),N=e("p",null,[i("本篇文章會以發佈一個 Vite 專案為案例來介紹 GitHub Actions"),e("br"),i(" 目標是將一個 Vite 專案的原始碼放在私有的存放庫，"),e("br"),i(" 將打包後的靜態網站放在公開的存放庫。")],-1),S=s('<p>一般網路上的教學都是推送到同一個存放庫，<br> 使用手動或 GitHub Actions 另外開一個 gh-pages 分支，<br> 設定 Github Pages 抓取 gh-pages 分支來抓取靜態網站的內容。</p><p>但是當免費仔也是有代價的！<br> 如果要用 Github Pages 來發佈網站，<br> 要將整個存放庫公開或是掏出魔法小卡給微軟</p><figure><img src="'+l+'" alt="免費仔不公開就不能用" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">免費仔不公開就不能用</figcaption></figure><figure><img src="'+h+'" alt="微軟爸爸要錢的畫面" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">微軟爸爸要錢的畫面</figcaption></figure><p>要公開或是花錢二選一，那怎麼辦呢？<br> 小孩子才做選擇！我全都要！</p><figure><img src="'+p+'" alt="要公開或是花錢二選一，那怎麼辦呢？" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">要公開或是花錢二選一，那怎麼辦呢？</figcaption></figure><h2 id="事前準備" tabindex="-1"><a class="header-anchor" href="#事前準備" aria-hidden="true">#</a> 事前準備</h2><h3 id="建立存放庫" tabindex="-1"><a class="header-anchor" href="#建立存放庫" aria-hidden="true">#</a> 建立存放庫</h3><p>為了本次教學我們先在自己的 GitHub 建立兩個存放庫<br> 一個私有的放 Vite 專案原始碼<br> 一個公開的放 Vite 專案打包完畢的資料夾目錄</p><figure><img src="'+g+'" alt="建立兩個存放庫" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">建立兩個存放庫</figcaption></figure><h3 id="建立-vite-專案" tabindex="-1"><a class="header-anchor" href="#建立-vite-專案" aria-hidden="true">#</a> 建立 Vite 專案</h3><p>建立 Vite 專案可以參考官方的教學文件</p>',12),B={href:"https://vitejs.dev/guide/",target:"_blank",rel:"noopener noreferrer"},L=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">npm</span> create vite@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="這邊選擇 Vue 專案為例" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">這邊選擇 Vue 專案為例</figcaption></figure><p>預覽專案</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>專案如果成功建置會出現這個範例畫面，<br> 咱們就直接拿初始專案來當範例 XD</p><figure><img src="`+u+'" alt="就直接用初始的樣子來做教學" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">就直接用初始的樣子來做教學</figcaption></figure><h3 id="路徑設定補充說明" tabindex="-1"><a class="header-anchor" href="#路徑設定補充說明" aria-hidden="true">#</a> 路徑設定補充說明</h3><p>因為剛剛我們的測試專案的存放命名是 <code>vite-demo</code>，<br> 在 Github Pages 發佈的網址規則會是 <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</code><br> 所以要在 Vite 專案設定基本路徑才能正確打包</p><figure><img src="'+f+'" alt="記得設定基本路徑" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">記得設定基本路徑</figcaption></figure>',9),O=e("br",null,null,-1),M={href:"https://vitejs.dev/guide/static-deploy.html#github-pages",target:"_blank",rel:"noopener noreferrer"},R=s('<h3 id="推送專案原始碼" tabindex="-1"><a class="header-anchor" href="#推送專案原始碼" aria-hidden="true">#</a> 推送專案原始碼</h3><p>把原始碼專案推送到遠端存放庫，<br> 喜歡用 VSCode 的版本控制工具推送，<br> 還是喜歡硬派 CLI 下命令都可以。</p><figure><img src="'+m+'" alt="反正就是推送到遠端存放庫就對了" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">反正就是推送到遠端存放庫就對了</figcaption></figure><p>到這邊我們已經完成事前準備了<br> 接下來開始準備著手打包後的專案</p><h2 id="發佈網站" tabindex="-1"><a class="header-anchor" href="#發佈網站" aria-hidden="true">#</a> 發佈網站</h2><h3 id="土法煉鋼" tabindex="-1"><a class="header-anchor" href="#土法煉鋼" aria-hidden="true">#</a> 土法煉鋼</h3><p>為了避免淪於不求甚解而照抄指令，<br> 所以先不直接進入主題。</p><p>一開始先從使用土法煉鋼來達成我們期望的目標，<br> 期望對於之後整個工作流程指令撰寫更清晰。</p><figure><img src="'+_+`" alt="按部就班比較好啦～" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">按部就班比較好啦～</figcaption></figure><h3 id="建置專案" tabindex="-1"><a class="header-anchor" href="#建置專案" aria-hidden="true">#</a> 建置專案</h3><p>如果要發佈打包後的專案，<br> 最簡單的做法就是在原本的專案下命令建置專案，<br> 然後把打包後的目錄推送到公開的存放庫。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>執行建置命令打包專案後會出現 <code>dist</code> 資料夾目錄</p><figure><img src="`+x+'" alt="左邊框起來的就是要被發佈的專案目錄" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">左邊框起來的就是要被發佈的專案目錄</figcaption></figure>',14),U=e("br",null,null,-1),X={href:"https://vitejs.dev/guide/static-deploy.html#building-the-app",target:"_blank",rel:"noopener noreferrer"},J=s('<h3 id="推送打包後的專案目錄" tabindex="-1"><a class="header-anchor" href="#推送打包後的專案目錄" aria-hidden="true">#</a> 推送打包後的專案目錄</h3><p>直接將 <code>dist</code> 資料夾目錄推送到公開的存放庫，<br> 要用 GUI 介面或 CLI 介面都可以。</p><figure><img src="'+y+'" alt="把目錄推送上去就像這樣" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">把目錄推送上去就像這樣</figcaption></figure><h3 id="設定-github-pages-的對應分支" tabindex="-1"><a class="header-anchor" href="#設定-github-pages-的對應分支" aria-hidden="true">#</a> 設定 Github Pages 的對應分支</h3><p>到發佈專案的存放庫設定 Github Pages<br> 點進綠框的 Pages 分頁<br> 在紅框的設定要抓取的分支後存檔<br> 稍待片刻就會看到黃框的超連結</p><figure><img src="'+v+'" alt="Github Pages 設定畫面" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">Github Pages 設定畫面</figcaption></figure><figure><img src="'+z+'" alt="成功了就會看到網站囉" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">成功了就會看到網站囉</figcaption></figure><h3 id="段落小結" tabindex="-1"><a class="header-anchor" href="#段落小結" aria-hidden="true">#</a> 段落小結</h3><p>上面的步驟是手動的方式來部屬專案，<br> 每次改好網站都要重複上面的步驟，<br> 推送原始碼到遠端存放庫之後，<br> 還要記得把打包後的目錄推送到另一個存放庫<br> 久了還是很麻煩，甚至可能會忘記。</p><p>如果能把剛剛的土法煉鋼手工活自動執行，<br> 當原始碼更新完畢後自動打包專案並發佈在公開存放庫，<br> 那這樣就太好了。</p><figure><img src="'+C+'" alt="接下來就快要進入重點了" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">接下來就快要進入重點了</figcaption></figure><h2 id="github-actions" tabindex="-1"><a class="header-anchor" href="#github-actions" aria-hidden="true">#</a> GitHub Actions</h2><h3 id="ci-cd-與-devops" tabindex="-1"><a class="header-anchor" href="#ci-cd-與-devops" aria-hidden="true">#</a> CI/CD 與 DevOps</h3><p>要談到 GitHub Actions 之前要先簡單談談 CI/CD</p><p>當大家去 Google 關鍵字常常看到像這樣的圖</p>',15),T=e("img",{src:G,alt:"取自網路(https://devopspage.com/what-is-ci-cd-in-devops-world/)",tabindex:"0",loading:"lazy"},null,-1),q={href:"https://devopspage.com/what-is-ci-cd-in-devops-world/",target:"_blank",rel:"noopener noreferrer"},F=s('<p>其中以下 CI/CD 指的是以下兩點</p><ul><li>CI（Continuous Integration）持續整合</li><li>CD（Continuous Deployment）持續部署</li></ul><p>這是目前軟體開發領域的重要精神，<br> 將 「規劃、開發、建置、測試、發佈、運作、監控」這些頻繁且重複的工作用工具或服務來自動化。<br> 確保開發環境的一致性，也能減少測試的時間成本，進而提升軟體品質，<br> 通常會是由 <code>DevOps</code> 來負責建置這樣的開發環境。</p><figure><img src="'+j+'" alt="關於CI/CD有很多東西能講" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">關於CI/CD有很多東西能講</figcaption></figure><h3 id="基本介紹" tabindex="-1"><a class="header-anchor" href="#基本介紹" aria-hidden="true">#</a> 基本介紹</h3><p>終於來到今天的重點了！！<br> 所以 GitHub Actions 是什麼呢？<br> 其實就是 Github 提供的 CI/CD 自動化服務，<br> 也就是把剛剛土法煉鋼的手動行為變自動執行，</p><p>這邊要強調的是 CI/CD 只是一個軟體開發觀念，<br> GitHub Actions 也只是其中一項工具，<br> 例如外面許多公司都會用 Jenkins 來做部屬，<br> 甚至即便寫 bash 腳本也是可行的一種方案(雖然就現在來看是滿辛苦的)。</p><figure><img src="'+k+'" alt="就是流程自動化啦～" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">就是流程自動化啦～</figcaption></figure><h3 id="官方文件" tabindex="-1"><a class="header-anchor" href="#官方文件" aria-hidden="true">#</a> 官方文件</h3><p>要知道如何撰寫自動化腳本要先看看官方文件。</p>',10),K={href:"https://docs.github.com/actions",target:"_blank",rel:"noopener noreferrer"},Q=s('<p>雖然右上角有中文翻譯，<br> 但我猜很多人不可能真的去看完(因為我也是 XD)，<br> 所以這邊直接講重點。</p><h3 id="如何建立" tabindex="-1"><a class="header-anchor" href="#如何建立" aria-hidden="true">#</a> 如何建立</h3><p>這裡提供兩種方法，大家可以挑自己喜歡的方式。</p><h4 id="在-vscode-上建立" tabindex="-1"><a class="header-anchor" href="#在-vscode-上建立" aria-hidden="true">#</a> 在 VSCode 上建立</h4><p>一種是從 VSCode 自己建立<br> 官方文件中的快速入門也是這個方法<br> 在專案目錄建立資料夾 <code>.github/workflows</code>，並建立一個副檔名為 <code>yml</code> 的檔案。<br> 本次範例我們就建立一個 <code>lgithub-actions-demo.ym</code></p><h4 id="在-github-上建立" tabindex="-1"><a class="header-anchor" href="#在-github-上建立" aria-hidden="true">#</a> 在 GitHub 上建立</h4><p>在 GitHub 上也是可以直接編輯程式碼並送交，<br> 如果要在 GitHub 上建立自動化流程也是可行的做法，<br> 線上做的好處就是有一些範本可以直接拿來參考，<br> 這邊把圖文步驟放上來。</p><p>點擊紅框的選單<code>Actions</code> 的選單</p><figure><img src="'+V+'" alt="然後會看到下面的畫面" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">然後會看到下面的畫面</figcaption></figure><p>可以選下面的範本或是紅框處自己建立</p><figure><img src="'+w+'" alt="這邊先選自己建立的" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">這邊先選自己建立的</figcaption></figure><p>然後就會進入編輯畫面了，檔名可以自己定義。</p>',12),W=e("br",null,null,-1),Y=e("br",null,null,-1),Z=e("br",null,null,-1),$={href:"https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses",target:"_blank",rel:"noopener noreferrer"},ee=e("figure",null,[e("img",{src:H,alt:"右邊的腳本範例可以直接使用來簡化指令",tabindex:"0",loading:"lazy"}),e("figcaption",{style:{"font-size":"1rem"}},"右邊的腳本範例可以直接使用來簡化指令")],-1),ie=e("br",null,null,-1),ae={href:"https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer"},te=s('<figure><img src="'+I+'" alt="鳩甘心欸～" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">鳩甘心欸～</figcaption></figure><h3 id="規劃流程" tabindex="-1"><a class="header-anchor" href="#規劃流程" aria-hidden="true">#</a> 規劃流程</h3><h3 id="撰寫指令" tabindex="-1"><a class="header-anchor" href="#撰寫指令" aria-hidden="true">#</a> 撰寫指令</h3><h3 id="使用限制" tabindex="-1"><a class="header-anchor" href="#使用限制" aria-hidden="true">#</a> 使用限制</h3><p>免費仔還是有些限制的，<br> 公開專案不受限制，<br> 私有專案有每個月免費的時間額度，<br> 不過一般私人使用也用不太到這種用量。</p><figure><img src="'+D+'" alt="還是微軟爸爸要錢的畫面" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">還是微軟爸爸要錢的畫面</figcaption></figure>',6);function se(ne,re){const a=r("ExternalLinkIcon");return o(),d("div",null,[P,E,N,c(" more "),S,e("p",null,[e("a",B,[i("Vite 官方專案建置教學"),t(a)])]),L,e("p",null,[i("官方的路徑設定相關教學"),O,e("a",M,[i("GitHub Pages base"),t(a)])]),R,e("p",null,[i("官方的打包相關教學"),U,e("a",X,[i("GitHub Pages Building the App"),t(a)])]),J,e("figure",null,[T,e("figcaption",null,[i("取自網路("),e("a",q,[i("https://devopspage.com/what-is-ci-cd-in-devops-world/"),t(a)]),i(")")])]),F,e("p",null,[e("a",K,[i("GitHub Actions documentation"),t(a)])]),Q,e("p",null,[i("右邊的 Marketplace 可以直接使用來簡化指令，"),W,i(" 主要是一些可重複使用的指令，例如簽出程式碼、發佈檔案到指定分支，"),Y,i(" 透過一些參數設定可以更輕鬆完成自動化。"),Z,i(" 關於可複用指令的官方介紹可以看 "),e("a",$,[i("jobs.<job_id>.steps[*].uses"),t(a)])]),ee,e("p",null,[i("右邊還有一些片段的語法可以參考，但建議還是直接去官方文件看比較詳細。"),ie,e("a",ae,[i("官方語法文件"),t(a)])]),te])}const ce=n(A,[["render",se],["__file","index.html.vue"]]);export{ce as default};
