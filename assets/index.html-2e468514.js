import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as u,c as g,a as e,b as t,e as n,d as h,w as i,f as d}from"./app-6c34ed1d.js";const p="/assets/meme-01-aaa9f0a9.png",m="/assets/2023-08-15-01-01c4f0a9.png",b="/assets/2023-08-15-02-7741a8e2.png",v="/assets/2023-08-15-03-556dc201.png",f="/assets/2023-08-15-04-a807fb8f.png",q="/assets/2023-08-15-05-e0433c17.png",_="/assets/2023-08-15-06-def74d7c.png",k="/assets/2023-08-15-07-d606c3f9.png",P="/assets/2023-08-15-08-a764314c.png",x="/assets/2023-08-15-09-d9d87180.png",I="/assets/2023-08-15-10-060804f7.png",y="/assets/2023-08-15-11-10158ea7.png",w="/assets/2023-08-15-12-642a8195.png",N="/assets/2023-08-15-13-e9daecdd.png",S={},R={id:"asp-net-core-6-專案範本",tabindex:"-1"},C=e("a",{class:"header-anchor",href:"#asp-net-core-6-專案範本","aria-hidden":"true"},"#",-1),V={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},E=d('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>當開發同類型的專案一段時間都會有一些固定的設計模式，<br> 或是一些常開發的功能：身分驗證、資料修改、郵件發送、報表產出。</p><p>然而每次開發專案都要從舊專案複製過來刪改，<br> 或是另開新的專案範本重新建立資料夾和各類程式片段，<br> 無形之中浪費許多人的時間，<br> 對於多人協作專案沒有可依循的規範容易造成許多歧見。</p><figure><img src="'+p+'" alt="職業倦怠就是這回事" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">職業倦怠就是這回事</figcaption></figure><p>本次目標為建立一個 Web API 專案範本，然後丟到 Nuget 上。</p>',5),T=d('<h2 id="動機" tabindex="-1"><a class="header-anchor" href="#動機" aria-hidden="true">#</a> 動機</h2><p>之所以會想要搞個 <code>ASP.NET Core</code> 專案範本，<br> 其動機由來是因為接觸了 <code>Laravel</code> 框架。</p><p>體驗到一個專注以網頁開發為主的框架對於開發體驗的幫助。</p><p>網頁開發會碰到的需求幾乎都有支援的套件可以快速實作，<br> 官方也有詳細的官方文件讓多人團隊有規範可以依循，<br> 進而提升團隊整體的軟體品質與降低後續接手維護的成本。</p><h2 id="範本類型" tabindex="-1"><a class="header-anchor" href="#範本類型" aria-hidden="true">#</a> 範本類型</h2><p><code>ASP.NET Core</code> 有兩種專案範本</p><ul><li>專案範本</li><li>項目範本</li></ul><p>本次教學以專案範本為例。</p><h3 id="專案範本" tabindex="-1"><a class="header-anchor" href="#專案範本" aria-hidden="true">#</a> 專案範本</h3><p>用 <code>Visual Studio</code> 建立新專案會看到的就是專案範本</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="項目範本" tabindex="-1"><a class="header-anchor" href="#項目範本" aria-hidden="true">#</a> 項目範本</h3><p>用 <code>Visual Studio</code> 在專案內新建項目的就是項目範本</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="範本專案" tabindex="-1"><a class="header-anchor" href="#範本專案" aria-hidden="true">#</a> 範本專案</h2><h3 id="建立範本專案" tabindex="-1"><a class="header-anchor" href="#建立範本專案" aria-hidden="true">#</a> 建立範本專案</h3><p>建立一個 Web API 專案範本。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="修改範本專案" tabindex="-1"><a class="header-anchor" href="#修改範本專案" aria-hidden="true">#</a> 修改範本專案</h3><p>加入自己要的東西或是做一些修改。</p><p>例如本次範例我們建立一個 <code>ViewModels</code> 資料夾，<br> 並且把 <code>WeatherForecast.cs</code> 放進去。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="建立範本設定" tabindex="-1"><a class="header-anchor" href="#建立範本設定" aria-hidden="true">#</a> 建立範本設定</h3>',23),A=e("br",null,null,-1),z={href:"https://github.com/dotnet/templating/wiki/Reference-for-template.json",target:"_blank",rel:"noopener noreferrer"},D=d(`<p>在專案資料夾內新增範本設定檔 <code>.template.config/template.json</code>。<br> 可參考官方的範例或是下方範例</p><div class="language-JSON line-numbers-mode" data-ext="JSON"><pre class="language-JSON"><code>{
  &quot;$schema&quot;: &quot;http://json.schemastore.org/template&quot;,
  &quot;author&quot;: &quot;Pamis Wang&quot;,
  &quot;classifications&quot;: [
    &quot;API&quot;,
    &quot;webapi&quot;
  ],
  &quot;identity&quot;: &quot;pamis-wang.api-template-dot-net-core-6&quot;,
  &quot;name&quot;: &quot;pamis-wang.api-template-dot-net-core-6&quot;,
  &quot;shortName&quot;: &quot;pamis-api&quot;,
  &quot;tags&quot;: {
    &quot;language&quot;: &quot;C#&quot;,
    &quot;type&quot;: &quot;project&quot;
  },
  &quot;sourceName&quot;: &quot;api-template-dot-net-core-6&quot;,
  &quot;sources&quot;: [
    {
      &quot;modifiers&quot;: [
        {
          &quot;exclude&quot;: [
            &quot;**/[Bb]in/**&quot;,
            &quot;**/[Oo]bj/**&quot;,
            &quot;.template.config/**/*&quot;,
            &quot;**/*.filelist&quot;,
            &quot;**/*.user&quot;,
            &quot;**/*.lock.json&quot;,
            &quot;.vs/**&quot;,
            &quot;**/.vscode/**&quot;,
            &quot;**/.git/**/*&quot;
          ]
        }
      ]
    }
  ],
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="範本設定說明" tabindex="-1"><a class="header-anchor" href="#範本設定說明" aria-hidden="true">#</a> 範本設定說明</h3><p>這下表格為必須使用的設定</p><table><thead><tr><th>成員</th><th>類型</th><th>描述</th></tr></thead><tbody><tr><td>$schema</td><td>URI</td><td>template.json 檔案的 JSON 結構描述。 VSC 需要此成員才能啟用 IntelliSense。</td></tr><tr><td>author</td><td>string</td><td>範本的作者。</td></tr><tr><td>classifications</td><td>array(string)</td><td>範本的分類。出現在使用 dotnet new list 命令時</td></tr><tr><td>identity</td><td>string</td><td>此範本的唯一名稱。</td></tr><tr><td>name</td><td>string</td><td>使用者應該會看到的範本名稱。</td></tr><tr><td>shortName</td><td>string</td><td>此範本名稱是由使用者指定，以 dotnet CLI 命令可輸入簡短名稱。</td></tr><tr><td>sourceName</td><td>string</td><td>要取代的專案名稱，詳細說明看下方補充</td></tr></tbody></table><p>以下則為其他可用的設定</p><table><thead><tr><th>成員</th><th>類型</th><th>描述</th></tr></thead><tbody><tr><td>preferNameDirectory</td><td>string</td><td>指出是否要在指定名稱但未設定輸出目錄時，為範本建立目錄。預設值為 false。</td></tr><tr><td>tags</td><td>object</td><td>物件屬性有 <code>language</code> 和 <code>type </code>。</td></tr><tr><td>language</td><td>string</td><td><code>language</code>是程式語言，通常為 <code>C#</code>、<code>VB</code>、<code> F#</code> 。</td></tr><tr><td>type</td><td>enum</td><td><code>type </code> 是範本類型，<code>project</code> （專案範本）、<code>item</code>（項目範本）、<code>solution</code>（解決方案）</td></tr><tr><td>exclude</td><td>array(string)</td><td>要排除的資料夾和檔案</td></tr></tbody></table><p>當建立範本用 <code>dotnet new &lt;範本名稱&gt; -n &lt;專案名稱&gt;</code> ，<br> 會將 <code>sourceName</code> 的字串替換成 <code>-n</code> 指定的專案名稱，<br> 一般來說就是打範本的專案名稱。</p><p>當建立範本用 <code>dotnet new &lt;範本名稱&gt; -n &lt;專案名稱&gt;</code><br><code>preferNameDirectory</code> 會影響專案建立的資料夾設定<br> 預設是 <code>false</code>（很多教學可能因為版本差異都寫成<code>true</code>）</p><ul><li><p><code>true</code>：在目前指向的目錄建立一個與專案名稱相同的資料夾與專案內容。<br><img src="`+q+'" alt="" loading="lazy"></p></li><li><p><code>false</code>：在目前指向的目錄建立專案內容，「不會」建立與專案名稱相同的資料夾。<br><img src="'+_+'" alt="" loading="lazy"></p></li></ul><p>會多加 <code>exclude</code> 是考慮到專案會加入版控，預設不會排除，故手動加入。</p><h3 id="匯出範本專案" tabindex="-1"><a class="header-anchor" href="#匯出範本專案" aria-hidden="true">#</a> 匯出範本專案</h3><p>執行 dotnet CLI 指令</p>',13),M=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[t("dotnet new "),e("span",{class:"token function"},"install"),t(" ."),e("span",{class:"token punctuation"},"\\"),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),j=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[t("dotnet new "),e("span",{class:"token function"},"install"),t(` ./
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),F=d('<p>出現下面的訊息就是成功了。</p><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="打包套件" tabindex="-1"><a class="header-anchor" href="#打包套件" aria-hidden="true">#</a> 打包套件</h2><h3 id="設定專案描述" tabindex="-1"><a class="header-anchor" href="#設定專案描述" aria-hidden="true">#</a> 設定專案描述</h3><p>開啟專案的 <code>.csproj</code> 檔案，加入必要的 XML 格式標籤。<br> 以 Web API 範本為例</p><h3 id="專案描述範例" tabindex="-1"><a class="header-anchor" href="#專案描述範例" aria-hidden="true">#</a> 專案描述範例</h3><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;

    &lt;PropertyGroup&gt;
        &lt;PackageId&gt;PamisWang.Template.WebAPI&lt;/PackageId&gt;
        &lt;PackageType&gt;Template&lt;/PackageType&gt;
        &lt;PackageVersion&gt;1.0&lt;/PackageVersion&gt;
        &lt;Title&gt;Pamis Wang Template Web API&lt;/Title&gt;
        &lt;Authors&gt;Pamis Wang&lt;/Authors&gt;
        &lt;Description&gt;Web API 範本&lt;/Description&gt;
        &lt;PackageTags&gt;dotnet-new;templates&lt;/PackageTags&gt;
        &lt;PackageReadmeFile&gt;README.md&lt;/PackageReadmeFile&gt;
        &lt;PackageIcon&gt;favicon.png&lt;/PackageIcon&gt;
        &lt;RepositoryUrl&gt;https://github.com/pamiswang/api-template-dot-net-core-6&lt;/RepositoryUrl&gt;

        &lt;IsPackable&gt;true&lt;/IsPackable&gt;
        &lt;EnableDefaultContentItems&gt;false&lt;/EnableDefaultContentItems&gt;
        &lt;NoDefaultExcludes&gt;true&lt;/NoDefaultExcludes&gt;
        &lt;IncludeContentInPack&gt;true&lt;/IncludeContentInPack&gt;
        &lt;IncludeBuildOutput&gt;true&lt;/IncludeBuildOutput&gt;
        &lt;ContentTargetFolders&gt;content&lt;/ContentTargetFolders&gt;

        &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;

        &lt;Nullable&gt;enable&lt;/Nullable&gt;
        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
        &lt;RootNamespace&gt;api_template_dot_net_core_6&lt;/RootNamespace&gt;
    &lt;/PropertyGroup&gt;

    &lt;ItemGroup&gt;
        &lt;Content Include=&quot;**\\*&quot; Exclude=&quot;**\\bin\\**;**\\obj\\**;**\\.git\\**;**\\.vs\\**;favicon.png&quot;/&gt;
        &lt;None Update=&quot;favicon.png&quot; Pack=&quot;true&quot; PackagePath=&quot;\\&quot;/&gt;
        &lt;None Update=&quot;README.md&quot;  Pack=&quot;true&quot; PackagePath=&quot;\\&quot;/&gt;
    &lt;/ItemGroup&gt;

    &lt;ItemGroup&gt;
        &lt;PackageReference Include=&quot;Dapper&quot; Version=&quot;2.0.143&quot; /&gt;
        &lt;PackageReference Include=&quot;MailKit&quot; Version=&quot;4.1.0&quot; /&gt;
        &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer&quot; Version=&quot;5.1.0&quot; /&gt;
        &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore&quot; Version=&quot;7.0.10&quot; /&gt;
        &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Sqlite&quot; Version=&quot;7.0.10&quot; /&gt;
        &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.SqlServer&quot; Version=&quot;7.0.10&quot; /&gt;
        &lt;PackageReference Include=&quot;Newtonsoft.Json&quot; Version=&quot;13.0.3&quot; /&gt;
        &lt;PackageReference Include=&quot;Newtonsoft.Json.Bson&quot; Version=&quot;1.0.2&quot; /&gt;
        &lt;PackageReference Include=&quot;Newtonsoft.Json.Schema&quot; Version=&quot;3.0.15&quot; /&gt;
        &lt;PackageReference Include=&quot;Npgsql.EntityFrameworkCore.PostgreSQL&quot; Version=&quot;7.0.4&quot; /&gt;
        &lt;PackageReference Include=&quot;Oracle.EntityFrameworkCore&quot; Version=&quot;7.21.11&quot; /&gt;
        &lt;PackageReference Include=&quot;Pomelo.EntityFrameworkCore.MySql&quot; Version=&quot;7.0.0&quot; /&gt;
        &lt;PackageReference Include=&quot;RestSharp&quot; Version=&quot;110.2.0&quot; /&gt;
        &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore&quot; Version=&quot;6.5.0&quot; /&gt;
        &lt;PackageReference Include=&quot;Swashbuckle.AspNetCore.Swagger&quot; Version=&quot;6.5.0&quot; /&gt;
        &lt;PackageReference Include=&quot;System.DirectoryServices&quot; Version=&quot;7.0.1&quot; /&gt;
        &lt;PackageReference Include=&quot;System.DirectoryServices.AccountManagement&quot; Version=&quot;7.0.0&quot; /&gt;
        &lt;PackageReference Include=&quot;System.DirectoryServices.Protocols&quot; Version=&quot;7.0.1&quot; /&gt;
    &lt;/ItemGroup&gt;

&lt;/Project&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="套件資料說明" tabindex="-1"><a class="header-anchor" href="#套件資料說明" aria-hidden="true">#</a> 套件資料說明</h3><table><thead><tr><th>屬性名稱</th><th>描述</th></tr></thead><tbody><tr><td>PackageId</td><td>套件名稱或識別碼。</td></tr><tr><td>PackageType</td><td>指出套件的封裝類型</td></tr><tr><td>PackageVersion</td><td>NuGet 套件版本。</td></tr><tr><td>Title</td><td>套件的簡短標題</td></tr><tr><td>Authors</td><td>以逗號分隔的套件作者清單</td></tr><tr><td>Description</td><td>套件的描述。</td></tr><tr><td>PackageTags</td><td>以空格分隔的標記與關鍵字清單</td></tr><tr><td>PackageReadmeFile</td><td>套件讀我檔案的路徑。</td></tr><tr><td>PackageIcon</td><td>套件圖示影像檔的路徑。</td></tr><tr><td>RepositoryUrl</td><td>用來建置封裝的存放庫 URL</td></tr></tbody></table><h3 id="套件封裝設定" tabindex="-1"><a class="header-anchor" href="#套件封裝設定" aria-hidden="true">#</a> 套件封裝設定</h3><table><thead><tr><th>屬性名稱</th><th>描述</th></tr></thead><tbody><tr><td>IsPackable</td><td>指定是否可封裝專案</td></tr><tr><td>EnableDefaultContentItems</td><td>設定是否要啟用 SDK 型專案預設排除的檔案設定</td></tr><tr><td>NoDefaultExcludes</td><td>設定不要排除 NuGet 文件以及以點開頭的檔案和資料夾，例如 .svn 和 .gitignore。</td></tr><tr><td>IncludeContentInPack</td><td>類型 Content 的專案是否自動包含在產生的套件中。預設為 true。</td></tr><tr><td>IncludeBuildOutput</td><td>決定是否應該在套件中包含組建輸出組件。</td></tr><tr><td>ContentTargetFolders</td><td>套件產生的檔案預設會放在 <code>content</code></td></tr><tr><td>TargetFramework</td><td>設定可確保 MSBuild 會在您執行 pack 命令以編譯和封裝專案時正常執行。</td></tr><tr><td>Content</td><td>設定有哪些檔案要被打包或被排除</td></tr><tr><td>None Update</td><td>排除指定檔案被打包到 <code>content</code></td></tr></tbody></table><h3 id="打包套件-1" tabindex="-1"><a class="header-anchor" href="#打包套件-1" aria-hidden="true">#</a> 打包套件</h3><p>在專案目錄下輸入指令 <code>dotnet pack</code> 就會開始打包，<br> 打包成功的話預設會在 <code>\\bin\\Debug</code> 產生 <code>.nupkg</code> 檔案。</p><h3 id="安裝套件" tabindex="-1"><a class="header-anchor" href="#安裝套件" aria-hidden="true">#</a> 安裝套件</h3><p>當套件打包好之後可以直接在本機進行安裝</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet new <span class="token function">install</span> <span class="token punctuation">[</span>nupkg的檔案路徑<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+P+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="使用範本" tabindex="-1"><a class="header-anchor" href="#使用範本" aria-hidden="true">#</a> 使用範本</h3><p>安裝好之後就可以來測試看看，<br> 首先查詢專案範本列表看有沒有安裝成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet new list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>建立專案指令後看到成功建立專案項目。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet new pamis-webapi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>懶得打指令的也可以從 Visual Studio 的專案項目畫面做選擇<br> 只是不懂為什麼我家貓貓臉變黑了......</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="發佈到-nuget-上" tabindex="-1"><a class="header-anchor" href="#發佈到-nuget-上" aria-hidden="true">#</a> 發佈到 NuGet 上</h3><p>首先要註冊帳號<br> 接著右上角的上傳</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上傳完畢等伺服器建立索引就會出現套件頁面了</p><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不過目前 NuGet 上傳後就不能刪除了 XD</p><h2 id="後記" tabindex="-1"><a class="header-anchor" href="#後記" aria-hidden="true">#</a> 後記</h2>',33),L=e("br",null,null,-1),W={href:"https://learn.microsoft.com/zh-tw/dotnet/core/tutorials/cli-templates-create-template-package?pivots=dotnet-6-0",target:"_blank",rel:"noopener noreferrer"},B=e("br",null,null,-1),G=e("br",null,null,-1),O=e("br",null,null,-1),U=e("br",null,null,-1),J=e("h2",{id:"參考資料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#參考資料","aria-hidden":"true"},"#"),t(" 參考資料")],-1),X=e("h3",{id:"範本專案-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#範本專案-1","aria-hidden":"true"},"#"),t(" 範本專案")],-1),K={href:"https://learn.microsoft.com/zh-tw/dotnet/core/tutorials/cli-templates-create-project-template",target:"_blank",rel:"noopener noreferrer"},$=e("br",null,null,-1),Q={href:"https://learn.microsoft.com/zh-tw/dotnet/core/tutorials/cli-templates-create-template-package?pivots=dotnet-6-0",target:"_blank",rel:"noopener noreferrer"},H=e("br",null,null,-1),Y={href:"https://learn.microsoft.com/zh-tw/dotnet/core/tools/custom-templates",target:"_blank",rel:"noopener noreferrer"},Z=e("br",null,null,-1),ee={href:"https://blog.miniasp.com/post/2020/01/19/dotnet-new-template-how-to",target:"_blank",rel:"noopener noreferrer"},te=e("br",null,null,-1),ne={href:"https://github.com/dotnet/templating/wiki/Reference-for-template.json",target:"_blank",rel:"noopener noreferrer"},ae=e("h3",{id:"發布範本",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#發布範本","aria-hidden":"true"},"#"),t(" 發布範本")],-1),ie={href:"https://learn.microsoft.com/zh-tw/nuget/reference/msbuild-targets",target:"_blank",rel:"noopener noreferrer"},de=e("br",null,null,-1),re={href:"https://learn.microsoft.com/zh-tw/dotnet/core/project-sdk/overview",target:"_blank",rel:"noopener noreferrer"},oe=e("br",null,null,-1),se={href:"https://learn.microsoft.com/zh-tw/nuget/create-packages/creating-a-package-msbuild",target:"_blank",rel:"noopener noreferrer"},le=e("br",null,null,-1),ce={href:"https://learn.microsoft.com/zh-tw/nuget/create-packages/package-authoring-best-practices",target:"_blank",rel:"noopener noreferrer"};function ue(ge,he){const a=s("ExternalLinkIcon"),l=s("Tabs");return u(),g("div",null,[e("h1",R,[C,t(),e("a",V,[t("ASP.NET"),n(a)]),t(" Core 6 專案範本")]),E,h(" more "),T,e("p",null,[t("範本資料夾中的所有檔案和資料夾都會包含為範本的一部分，除了特殊設定資料夾之外。"),A,t(" 預設會被忽略的檔案和資料夾可見 "),e("a",z,[t("範本設定參考"),n(a)]),t("。")]),D,n(l,{id:"306",data:[{id:"Windows"},{id:"Linux 或 macOS"}],active:0},{title0:i(({value:r,isActive:o})=>[t("Windows")]),title1:i(({value:r,isActive:o})=>[t("Linux 或 macOS")]),tab0:i(({value:r,isActive:o})=>[M]),tab1:i(({value:r,isActive:o})=>[j]),_:1}),F,e("p",null,[t("撰寫這篇文章的時候花很多時間在排除套件打包的問題，"),L,t(" 因為微軟官方文件關於"),e("a",W,[t("建立範本套件"),n(a)]),t("的教學是基於主控台為例子"),B,t(" 而每種專案內容的專案描述都有很多預設設定要另外查。"),G,t(" 所以整個套件打包的過程是各種坑，"),O,t(" 不過還好 dotnet CLI 的錯誤訊息都滿清楚的，"),U,t(" 只要跟著訊息去逐一解決就會成功。")]),J,X,e("p",null,[e("a",K,[t("教學課程：建立專案範本"),n(a)]),$,e("a",Q,[t("教學課程：建立範本套件"),n(a)]),H,e("a",Y,[t("dotnet new 的自訂範本"),n(a)]),Z,e("a",ee,[t("自訂 dotnet new 專案範本的重要觀念與範例"),n(a)]),te,e("a",ne,[t("Reference for template.json"),n(a)])]),ae,e("p",null,[e("a",ie,[t("NuGet 以目標的形式 MSBuild 封裝和還原"),n(a)]),de,e("a",re,[t(".NET 專案 SDK"),n(a)]),oe,e("a",se,[t("使用 MSBuild 建立 NuGet 套件"),n(a)]),le,e("a",ce,[t("套件撰寫最佳做法"),n(a)])])])}const be=c(S,[["render",ue],["__file","index.html.vue"]]);export{be as default};
