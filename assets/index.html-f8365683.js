import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as t,d as l,a,b as e,e as c,f as s}from"./app-0ff84aa6.js";const o="/assets/meme-01-95604822.png",p={},h=a("h1",{id:"laravel-常用指令",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#laravel-常用指令","aria-hidden":"true"},"#"),e(" Laravel 常用指令")],-1),u=a("h2",{id:"前言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),e(" 前言")],-1),b=a("p",null,[e("要活用 Laravel 框架則需要很好地使用 Artisan CLI，"),a("br"),e(" 不過官網文件的指令比較分散於各章節。")],-1),v=a("p",null,[e("本文簡單整理一些常用的 Artisan 指令，"),a("br"),e(" 以及一些常用的指令選項，"),a("br"),e(" 未來也會逐步補充方便速查。")],-1),m=s(`<h2 id="about" tabindex="-1"><a class="header-anchor" href="#about" aria-hidden="true">#</a> about</h2><p>快速瀏覽專案的設定、驅動設定、與環境設定</p><h3 id="查看專案全部設定" tabindex="-1"><a class="header-anchor" href="#查看專案全部設定" aria-hidden="true">#</a> 查看專案全部設定</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan about
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看專案部分設定" tabindex="-1"><a class="header-anchor" href="#查看專案部分設定" aria-hidden="true">#</a> 查看專案部分設定</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan about <span class="token parameter variable">--only</span><span class="token operator">=</span>environment
php artisan about <span class="token parameter variable">--only</span><span class="token operator">=</span>cache
php artisan about <span class="token parameter variable">--only</span><span class="token operator">=</span>drivers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="輸出-json-格式" tabindex="-1"><a class="header-anchor" href="#輸出-json-格式" aria-hidden="true">#</a> 輸出 JSON 格式</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan about <span class="token parameter variable">--json</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="serve" tabindex="-1"><a class="header-anchor" href="#serve" aria-hidden="true">#</a> serve</h2><p>開發用的伺服器</p><h3 id="啟動伺服器" tabindex="-1"><a class="header-anchor" href="#啟動伺服器" aria-hidden="true">#</a> 啟動伺服器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改位址" tabindex="-1"><a class="header-anchor" href="#修改位址" aria-hidden="true">#</a> 修改位址</h3><p>預設的主機位址是 <code>127.0.0.1</code> ，可透過 <code>host</code> 選項更改</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan serv <span class="token parameter variable">--host</span><span class="token operator">=</span><span class="token number">127.0</span>.0.100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改通訊埠" tabindex="-1"><a class="header-anchor" href="#修改通訊埠" aria-hidden="true">#</a> 修改通訊埠</h3><p>預設是 port 是 <code>8000</code> ，可透過 <code>port</code> 選項更改</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan serv <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">9999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="migrate" tabindex="-1"><a class="header-anchor" href="#migrate" aria-hidden="true">#</a> migrate</h2><p>資料庫遷移指令</p><h3 id="建立遷移指令" tabindex="-1"><a class="header-anchor" href="#建立遷移指令" aria-hidden="true">#</a> 建立遷移指令</h3><p>資料表名稱命名慣例為複數型態，<br> 執行後會在專案目錄內的 <code>/database/migrations/</code> 內出現建立的資料表結構，<br> 檔案名稱會加上時間戳來排定執行順序。</p><p>已經執行過的遷移指令會被記錄在資料庫內不會再執行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:migration create_examples_table
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="建立於指定的路徑下" tabindex="-1"><a class="header-anchor" href="#建立於指定的路徑下" aria-hidden="true">#</a> 建立於指定的路徑下</h3><p>可透過 <code>path</code> 選項加上指定的路徑</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:migration create_examples_table <span class="token parameter variable">--path</span><span class="token operator">=</span>/database/migrations/test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="執行遷移指令" tabindex="-1"><a class="header-anchor" href="#執行遷移指令" aria-hidden="true">#</a> 執行遷移指令</h3><p>一般不加入任何選項時，預設為 <code>/database/migrations</code> 下的檔案，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="執行指定的路徑下的遷移指令" tabindex="-1"><a class="header-anchor" href="#執行指定的路徑下的遷移指令" aria-hidden="true">#</a> 執行指定的路徑下的遷移指令</h3><p>可透過 <code>path</code> 選項加上指定的路徑，路徑下的遷移檔會被執行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate <span class="token parameter variable">--path</span><span class="token operator">=</span>/database/migrations/test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="強制執行遷移" tabindex="-1"><a class="header-anchor" href="#強制執行遷移" aria-hidden="true">#</a> 強制執行遷移</h3><p>一般使用執行遷移指令時，如果資料表已經存在於資料庫內，<br> 或是執行會導致資料遺失的動作，會出現警告要求重複確認。</p><p>此時可透過 <code>force</code> 選項進行強制遷移。</p><div class="hint-container danger"><p class="hint-container-title">不作死不會死</p><p>強烈建議不要在正式環境使用這選項！<br> 否則......從刪資料庫到跑路......這邊概不負責的唷。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate <span class="token parameter variable">--path</span><span class="token operator">=</span>/database/migrations/test <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="復原遷移指定步驟" tabindex="-1"><a class="header-anchor" href="#復原遷移指定步驟" aria-hidden="true">#</a> 復原遷移指定步驟</h3><p>可透過 <code>step</code> 回滾特定步數。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate:rollback
php artisan migrate:rollback <span class="token parameter variable">--step</span><span class="token operator">=</span><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="復原遷移全部步驟" tabindex="-1"><a class="header-anchor" href="#復原遷移全部步驟" aria-hidden="true">#</a> 復原遷移全部步驟</h3><p>該指令會先把所以指令回滾，<br> 然後再執行遷移指令。<br> 重建整個資料庫比較安全的做法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate:refresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="復原遷移可選指令" tabindex="-1"><a class="header-anchor" href="#復原遷移可選指令" aria-hidden="true">#</a> 復原遷移可選指令</h3><p>一樣可以指令執行路徑與強制選項</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate:refresh <span class="token parameter variable">--path</span><span class="token operator">=</span>/database/migrations/test <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="重置遷移" tabindex="-1"><a class="header-anchor" href="#重置遷移" aria-hidden="true">#</a> 重置遷移</h3><p>與上面的 <code>refresh</code> 不同，<code>fresh</code> 會刪除所有資料表後才執行全部的遷移。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate:fresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">不作死不會死</p><figure><img src="`+o+'" alt="在正式環境跑這個絕對很不妙的！" tabindex="0" loading="lazy"><figcaption style="font-size:1rem;">在正式環境跑這個絕對很不妙的！</figcaption></figure></div><h3 id="逆向遷移" tabindex="-1"><a class="header-anchor" href="#逆向遷移" aria-hidden="true">#</a> 逆向遷移</h3>',52),g={href:"https://github.com/kitloong/laravel-migrations-generator",target:"_blank",rel:"noopener noreferrer"},k=a("br",null,null,-1),x=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate:generate <span class="token parameter variable">--connection</span><span class="token operator">=</span><span class="token string">&quot;連線名稱&quot;</span>
php artisan migrate:generate <span class="token parameter variable">--connection</span><span class="token operator">=</span><span class="token string">&quot;database_old&quot;</span>
php artisan migrate:generate <span class="token parameter variable">--tables</span><span class="token operator">=</span><span class="token string">&quot;table1,table2,table3,table4,table5&quot;</span>
php artisan migrate:generate <span class="token parameter variable">--ignore</span><span class="token operator">=</span><span class="token string">&quot;table3,table4,table5&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> component</h2><p>Laravel 7 之後新增的指令，<br> 功能上與過去的 Section 、 Layout 、 Include 類似，<br> 使用上的觀念類似前端的 Slot 概念。</p><h3 id="建立具名元件" tabindex="-1"><a class="header-anchor" href="#建立具名元件" aria-hidden="true">#</a> 建立具名元件</h3><p>元件會新增在 <code>app/View/Components</code> 與 <code>resources/views/components</code> 目錄中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:component Alert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以在子資料夾內建立元件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:component Forms/Input
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="建立匿名元件" tabindex="-1"><a class="header-anchor" href="#建立匿名元件" aria-hidden="true">#</a> 建立匿名元件</h3><p>加入 <code>view</code> 選項建立匿名元件，<br> 可通過 <code>&lt;x-forms.input /&gt;</code> 讓 Blade 自動去找對應目錄下的匿名元件，<br> 一般來說比較推薦用匿名元件就可以了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:component forms.input <span class="token parameter variable">--view</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test</h2><h3 id="建立測試" tabindex="-1"><a class="header-anchor" href="#建立測試" aria-hidden="true">#</a> 建立測試</h3><p>建立新測試案例，檔案會被新增在 <code>tests/Feature</code> 目錄下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:test UserTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或是可加上路徑來歸類資料夾目錄</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:test Fake/ConvertTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="執行測試" tabindex="-1"><a class="header-anchor" href="#執行測試" aria-hidden="true">#</a> 執行測試</h3><p>執行全部的測試，測試結果會出現於 CLI 害面。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加入 <code>filter</code> 選項，方法名 測試文件路徑。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>TTY 模式不支援 Windows 平台。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan <span class="token builtin class-name">test</span>
php artisan <span class="token builtin class-name">test</span> <span class="token parameter variable">--filter</span> <span class="token punctuation">{</span>ClassName::TestMethodName<span class="token punctuation">}</span> <span class="token punctuation">{</span>FilePath<span class="token punctuation">}</span>
php artisan <span class="token builtin class-name">test</span> <span class="token parameter variable">--filter</span> ConvertTest::test_example Tests<span class="token punctuation">\\</span>Feature<span class="token punctuation">\\</span>Fake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function f(_,q){const n=i("ExternalLinkIcon");return d(),t("div",null,[h,u,b,v,l(" more "),m,a("p",null,[e("安裝這個套件 "),a("a",g,[e("laravel-migrations-generator"),c(n)]),e(" 才能使用下方的指令，"),k,e(" 通常用於想要用新框架改寫系統，但已存在既有的資料庫的情境。")]),x])}const N=r(p,[["render",f],["__file","index.html.vue"]]);export{N as default};
