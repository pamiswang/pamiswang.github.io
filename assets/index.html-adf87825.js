import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as i,d as c,a as e,b as n,e as t,f as s}from"./app-9f846748.js";const l="/assets/2024-02-25-01-d9f75485.jpg",p={},h=s('<h1 id="鍵盤掃描碼" tabindex="-1"><a class="header-anchor" href="#鍵盤掃描碼" aria-hidden="true">#</a> 鍵盤掃描碼</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>本文主要探討 <code>keybd_event</code> 函式，<br> 坊間許多的按鍵精靈都會有相關的範例。<br> 由於 <code>keybd_event</code> 比起其他 <code>SendMessage</code>、<code>PostMessage</code> 等函式更為底層，<br> 所以在撰寫上都比較推薦用 <code>keybd_event</code> 來做鍵盤訊號的模擬。</p>',3),u=e("h2",{id:"鍵盤虛擬碼與鍵盤掃描碼",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#鍵盤虛擬碼與鍵盤掃描碼","aria-hidden":"true"},"#"),n(" 鍵盤虛擬碼與鍵盤掃描碼")],-1),_={href:"https://learn.microsoft.com/zh-tw/windows/win32/api/winuser/nf-winuser-keybd_event",target:"_blank",rel:"noopener noreferrer"},b=s(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">keybd_event</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>in<span class="token punctuation">]</span> BYTE      bVk<span class="token punctuation">,</span>
  <span class="token punctuation">[</span>in<span class="token punctuation">]</span> BYTE      bScan<span class="token punctuation">,</span>
  <span class="token punctuation">[</span>in<span class="token punctuation">]</span> DWORD     dwFlags<span class="token punctuation">,</span>
  <span class="token punctuation">[</span>in<span class="token punctuation">]</span> ULONG_PTR dwExtraInfo
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bVk 是鍵盤虛擬碼<br> bScan 是鍵盤掃描碼<br> dwFlags 控制函式作業的各種層面。 此參數可以是下列一或多個值。</p><table><thead><tr><th>值</th><th>意義</th></tr></thead><tbody><tr><td>KEYEVENTF_EXTENDEDKEY 0x0001</td><td>如果指定，掃描碼前面會加上前置詞位元組。</td></tr><tr><td>KEYEVENTF_KEYUP 0x0002</td><td>如果指定，則會釋放掃描碼訊號。如果未指定，按鍵持續按下。</td></tr></tbody></table><p>一般的按鍵腳本通常用鍵盤虛擬碼就可以起作用<br> 所以許多網路上的教學都使用 <code>System.Windows.Forms</code> 的 <code>Keys</code> 列舉傳入 <code>bVk</code><br> 然後 <code>bScan</code> 都直接說傳入 0 即可。</p><p>事實上也不能說是錯的，因為許多電腦應用程式是可以生效的，<br> 但對於一些遊戲，如果沒有傳入掃描碼不會有作用，<br> 原因是有些遊戲接收的訊號是硬體訊號，<br> 特別是跨平台或以家機為主開發的遊戲。</p><h2 id="鍵盤掃描碼與鍵盤驅動的關係" tabindex="-1"><a class="header-anchor" href="#鍵盤掃描碼與鍵盤驅動的關係" aria-hidden="true">#</a> 鍵盤掃描碼與鍵盤驅動的關係</h2><p>那麼為什麼要這麼麻煩分成兩個呢？</p><p>由於歷史因素，各家生產的鍵盤的硬體訊號會有不同，<br> 像是以前的鍵盤是 PS/2 規格的。<br><img src="`+l+'" alt="現在看過的都是老人了" loading="lazy"></p><p>但作業系統不可能知道所有鍵盤的訊號，<br> 所以需要鍵盤驅動來做轉換，<br> 順序大致如下：</p><ol><li>使用者按下鍵盤的某個按鍵</li><li>鍵盤控制器發送硬體訊號到作業系統，這裡的硬體訊號就是掃描碼</li><li>掃描碼輸入到作業系統</li><li>作業系統接收到掃描碼</li><li>作業系統轉發掃描碼到鍵盤驅動</li><li>鍵盤驅動轉換為鍵盤虛擬碼</li></ol><h2 id="鍵盤掃描碼怎麼查" tabindex="-1"><a class="header-anchor" href="#鍵盤掃描碼怎麼查" aria-hidden="true">#</a> 鍵盤掃描碼怎麼查</h2><p>還好經歷時代洪流，那些神奇規格的鍵盤都死得差不多了。</p>',12),k=e("br",null,null,-1),f={href:"https://wiki.osdev.org/PS/2_Keyboard",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"結論",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#結論","aria-hidden":"true"},"#"),n(" 結論")],-1),v=e("p",null,[n("坊間的網路教學都說 "),e("code",null,"bScan"),n(" 都傳入 0 即可。"),e("br"),n(" 但知道了掃描碼的由來與作用，"),e("br"),n(" 這邊還是建議撰寫時可以傳入對應的數值。")],-1),w=e("h2",{id:"參考資料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#參考資料","aria-hidden":"true"},"#"),n(" 參考資料")],-1),g={href:"https://learn.microsoft.com/zh-tw/windows/win32/api/winuser/nf-winuser-keybd_event",target:"_blank",rel:"noopener noreferrer"},y=e("br",null,null,-1),x={href:"https://learn.microsoft.com/zh-tw/windows/win32/inputdev/virtual-key-codes",target:"_blank",rel:"noopener noreferrer"},E=e("br",null,null,-1),S={href:"https://learn.microsoft.com/zh-tw/windows/win32/inputdev/about-keyboard-input",target:"_blank",rel:"noopener noreferrer"},V=e("br",null,null,-1),N={href:"https://www.typeboom.com/archives/53/",target:"_blank",rel:"noopener noreferrer"},K=e("br",null,null,-1),P={href:"https://wiki.osdev.org/PS/2_Keyboard",target:"_blank",rel:"noopener noreferrer"};function T(B,Y){const a=r("ExternalLinkIcon");return d(),i("div",null,[h,c(" more "),u,e("p",null,[n("當參考官方文件 "),e("a",_,[n("keybd_event函式 (winuser.h)"),t(a)]),n(" 時會看到語法如下")]),b,e("p",null,[n("目前主流電腦鍵盤按鍵沿用 IBM 的行列矩陣方式佈局排列，稱為掃描矩陣。"),k,n(" 可以用 "),e("a",f,[n("掃描碼對照表"),t(a)]),n(" 來參考。")]),m,v,w,e("p",null,[e("a",g,[n("keybd_event 函式 (winuser.h)"),t(a)]),y,e("a",x,[n("虛擬按鍵代碼"),t(a)]),E,e("a",S,[n("鍵盤輸入概觀"),t(a)]),V,e("a",N,[n("电脑键盘工作原理"),t(a)]),K,e("a",P,[n("PS/2 Keyboard"),t(a)])])])}const D=o(p,[["render",T],["__file","index.html.vue"]]);export{D as default};
